"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import Command
import logging

from services.google_sheets import GoogleSheetsService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
moderation_router = Router()


async def send_to_moderators(bot, mod_chat_id: int, problem_id: int, problem_text: str, moderator_ids: list = None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
    –¢–æ–ª—å–∫–æ –≤ –õ–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º, –Ω–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.
    """
    try:
        moderation_text = f"""
üîç **–ù–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

**ID:** #{problem_id}
**–¢–µ–∫—Å—Ç:** {problem_text}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", 
                    callback_data=f"approve_{problem_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                    callback_data=f"reject_{problem_id}"
                )
            ]
        ])
        if not moderator_ids:
            moderator_ids = [719991464]  # Fallback, –µ—Å–ª–∏ context –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –õ–° –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        for moderator_id in moderator_ids:
            try:
                await bot.send_message(
                    chat_id=moderator_id,
                    text=moderation_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
            except Exception as mod_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {mod_error}")
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç:
        # if mod_chat_id:
        #     try:
        #         await bot.send_message(
        #             chat_id=mod_chat_id,
        #             text=moderation_text,
        #             reply_markup=keyboard,
        #             parse_mode="Markdown"
        #         )
        #         logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
        #     except Exception as chat_error:
        #         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {chat_error}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º: {e}")


@moderation_router.callback_query(F.data.startswith("approve_"))
async def approve_problem(callback: CallbackQuery, sheets_service: GoogleSheetsService, 
                         bot, channel_id: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        callback: Callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
        sheets_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        channel_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ callback_data
        problem_id = int(callback.data.split("_")[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
        success = sheets_service.update_status(problem_id, "approved")
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            problem_data = sheets_service.get_problem_by_id(problem_id)
            
            if problem_data:
                # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                await publish_to_channel(
                    bot, int(channel_id), problem_id, 
                    problem_data['–¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã']
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                await callback.answer("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
                await callback.message.edit_text(
                    f"‚úÖ **–û–¥–æ–±—Ä–µ–Ω–æ**\n\n**ID:** #{problem_id}\n**–°—Ç–∞—Ç—É—Å:** –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ"
                )
                
                logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@moderation_router.callback_query(F.data.startswith("reject_"))
async def reject_problem(callback: CallbackQuery, sheets_service: GoogleSheetsService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        callback: Callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
        sheets_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ callback_data
        problem_id = int(callback.data.split("_")[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
        success = sheets_service.update_status(problem_id, "rejected")
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            await callback.answer("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            await callback.message.edit_text(
                f"‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n**ID:** #{problem_id}\n**–°—Ç–∞—Ç—É—Å:** –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
            )
            
            logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def publish_to_channel(bot, channel_id: int, problem_id: int, problem_text: str):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–∞–Ω–∞–ª
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        channel_id: ID –∫–∞–Ω–∞–ª–∞
        problem_id: ID –ø—Ä–æ–±–ª–µ–º—ã
        problem_text: –¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_text = f"""
üí≠ **–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id}**

{problem_text}

üëç 0
        """
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ª–∞–π–∫–æ–≤ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ "–õ–∞–π–∫")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëç –õ–∞–π–∫ (0)", 
                    callback_data=f"like_{problem_id}"
                )
            ]
        ])
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(
            chat_id=channel_id,
            text=channel_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        logger.info(f"–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")


@moderation_router.message(Command("modstats"))
async def moderation_stats(message: Message, sheets_service: GoogleSheetsService):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Sheets
        all_records = sheets_service.worksheet.get_all_records()
        
        total_problems = len(all_records)
        pending_count = len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'pending'])
        approved_count = len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'approved'])
        rejected_count = len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'rejected'])
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

**–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º:** {total_problems}
**–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏:** {pending_count}
**–û–¥–æ–±—Ä–µ–Ω–æ:** {approved_count}
**–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:** {rejected_count}
        """
        
        await message.answer(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@moderation_router.message(Command("pending"))
async def show_pending_problems(message: Message, sheets_service: GoogleSheetsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        pending_problems = sheets_service.get_pending_problems()
        
        if not pending_problems:
            await message.answer("üì≠ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        text = f"‚è≥ **–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ({len(pending_problems)}):**\n\n"
        
        for problem in pending_problems:
            text += f"**#{problem.get('ID')}** - {problem.get('–¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã', '')[:100]}{'...' if len(problem.get('–¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã', '')) > 100 else ''}\n"
            text += f"üìÖ {problem.get('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '')}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for part in parts:
                await message.answer(part, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–±–ª–µ–º: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


@moderation_router.message(Command("approve"))
async def approve_problem_command(message: Message, sheets_service: GoogleSheetsService, bot, channel_id: str):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã: /approve <ID>"""
    try:
        command_text = message.text.split()
        if len(command_text) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <ID_–ø—Ä–æ–±–ª–µ–º—ã>")
            return
        
        try:
            problem_id = int(command_text[1])
        except ValueError:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        problem_data = sheets_service.get_problem_by_id(problem_id)
        if not problem_data:
            await message.answer(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if problem_data.get('–°—Ç–∞—Ç—É—Å') != 'pending':
            await message.answer(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return
        
        success = sheets_service.update_status(problem_id, "approved")
        
        if success:
            await publish_to_channel(bot, int(channel_id), problem_id, problem_data['–¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã'])
            await message.answer(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã #{problem_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@moderation_router.message(Command("reject"))
async def reject_problem_command(message: Message, sheets_service: GoogleSheetsService):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã: /reject <ID>"""
    try:
        command_text = message.text.split()
        if len(command_text) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <ID_–ø—Ä–æ–±–ª–µ–º—ã>")
            return
        
        try:
            problem_id = int(command_text[1])
        except ValueError:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        problem_data = sheets_service.get_problem_by_id(problem_id)
        if not problem_data:
            await message.answer(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if problem_data.get('–°—Ç–∞—Ç—É—Å') != 'pending':
            await message.answer(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return
        
        success = sheets_service.update_status(problem_id, "rejected")
        
        if success:
            await message.answer(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ #{problem_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã #{problem_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

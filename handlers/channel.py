"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–º
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∞–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import logging

from services.google_sheets import GoogleSheetsService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–º
channel_router = Router()


@channel_router.callback_query(F.data.startswith("like_"))
async def handle_like(callback: CallbackQuery, sheets_service: GoogleSheetsService):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ
    
    Args:
        callback: Callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
        sheets_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ callback_data
        problem_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        problem_data = sheets_service.get_problem_by_id(problem_id)
        
        if not problem_data:
            await callback.answer("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ª–∞–π–∫ (–¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å)
        result = sheets_service.toggle_like(problem_id, user_id)
        
        if result[0] is not None:
            new_likes_count, was_added = result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            await update_channel_message(callback, problem_id, problem_data['–¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã'], new_likes_count, user_id, sheets_service)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if was_added:
                await callback.answer(f"üëç –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ: {new_likes_count}")
            else:
                await callback.answer(f"üëé –õ–∞–π–∫ —É–±—Ä–∞–Ω! –í—Å–µ–≥–æ: {new_likes_count}")
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–¥–æ–±–∞–≤–∏–ª' if was_added else '—É–±—Ä–∞–ª'} –ª–∞–π–∫ –∫ –ø—Ä–æ–±–ª–µ–º–µ #{problem_id}, –≤—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {new_likes_count}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def update_channel_message(callback: CallbackQuery, problem_id: int, problem_text: str, likes_count: int, user_id: int, sheets_service: GoogleSheetsService):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤
    
    Args:
        callback: Callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
        problem_id: ID –ø—Ä–æ–±–ª–µ–º—ã
        problem_text: –¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã
        likes_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sheets_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        has_liked = sheets_service.has_user_liked(problem_id, user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∞–π–∫–Ω—É–ª –ø—Ä–æ–±–ª–µ–º—É #{problem_id}: {has_liked}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_text = f"""
üí≠ **–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id}**

{problem_text}

üëç {likes_count}
        """
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–π–∫–∞
        if has_liked:
            button_text = f"üëé –£–±—Ä–∞—Ç—å –ª–∞–π–∫ ({likes_count})"
        else:
            button_text = f"üëç –õ–∞–π–∫ ({likes_count})"
        
        logger.info(f"–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã #{problem_id}: {button_text}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text, 
                    callback_data=f"like_{problem_id}"
                )
            ]
        ])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=updated_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã #{problem_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")


async def get_problem_stats(sheets_service: GoogleSheetsService) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
    
    Args:
        sheets_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    try:
        all_records = sheets_service.worksheet.get_all_records()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_problems = len(all_records)
        approved_problems = [r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'approved']
        total_likes = sum(int(r.get('–õ–∞–π–∫–∏', 0)) for r in approved_problems)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
        most_liked = max(approved_problems, key=lambda x: int(x.get('–õ–∞–π–∫–∏', 0)), default={})
        
        stats = {
            'total_problems': total_problems,
            'approved_problems': len(approved_problems),
            'total_likes': total_likes,
            'most_liked': most_liked
        }
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}


async def format_problem_for_channel(problem_id: int, problem_text: str, likes_count: int = 0) -> tuple:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
    
    Args:
        problem_id: ID –ø—Ä–æ–±–ª–µ–º—ã
        problem_text: –¢–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã
        likes_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    channel_text = f"""
üí≠ **–ü—Ä–æ–±–ª–µ–º–∞ #{problem_id}**

{problem_text}

üëç {likes_count}
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ª–∞–π–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üëç –õ–∞–π–∫ ({likes_count})", 
                callback_data=f"like_{problem_id}"
            )
        ]
    ])
    
    return channel_text, keyboard
